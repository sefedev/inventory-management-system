// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  productId     String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Float
  saleItems     SaleItem[]
  purchases     PurchaseItem[]
}

model Sale {
  saleId      String     @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime   @default(now())
  totalAmount Float
  saleItems   SaleItem[]
}

model SaleItem {
  saleItemId String  @id @default(auto()) @map("_id") @db.ObjectId
  saleId     String  @db.ObjectId
  productId  String  @db.ObjectId
  quantity   Int
  unitPrice  Float
  product    Product @relation(fields: [productId], references: [productId])
  sale       Sale    @relation(fields: [saleId], references: [saleId])
}

model Purchase {
  purchaseId    String         @id @default(auto()) @map("_id") @db.ObjectId
  timestamp     DateTime       @default(now())
  totalAmount   Float
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  purchaseItemId String   @id @default(auto()) @map("_id") @db.ObjectId
  purchaseId     String   @db.ObjectId
  productId      String   @db.ObjectId
  quantity       Int
  unitPrice      Float
  product        Product  @relation(fields: [productId], references: [productId])
  purchase       Purchase @relation(fields: [purchaseId], references: [purchaseId])
}
